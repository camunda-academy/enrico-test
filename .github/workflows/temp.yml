name: Create zip files of updated lessons and deploy to skilljar

on:
  push:
    branches:
      - master

jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest
    name: Test changed-files
    outputs:
      proceed: ${{ steps.filter_new_dirs.outputs.proceed || steps.filter_updated_dirs.outputs.proceed }}
    steps:
      - uses: actions/checkout@v4

      - name: Get all changed markdown files
        id: changed-markdown-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
             **.md
             **.png
             **.jpg
             **.jpeg
      - name: Check if at least one file is updated or created
        id: set_created_or_updated_file
        run: echo "created_or_updated_files=${{ steps.changed-markdown-files.outputs.any_changed == 'true' }}" >> $GITHUB_OUTPUT           

      - name: Save new Markdown or image files to file
        if: steps.changed-markdown-files.outputs.added_files != ''
        run: |
          echo "${{ steps.changed-markdown-files.outputs.added_files }}" > new-files.txt
          cat new-files.txt
  
      - name: Save updated Markdown or image files to file
        if: steps.changed-markdown-files.outputs.modified_files != ''
        run: |
          echo "${{ steps.changed-markdown-files.outputs.modified_files }}" > updated-files.txt
          cat updated-files.txt

      # Filter new files
      - name: Filter new directories
        id: filter_new_dirs
        if: steps.changed-markdown-files.outputs.added_files != ''
        run: |
         if grep -oP 'en/lessons/\K[^/]*' new-files.txt > new_relevant_dirs.txt; then
           echo "New relevant directories found. Proceeding with the job."
           echo "proceed=true" >> $GITHUB_OUTPUT
         else
           echo "No new relevant directories found."
           echo "proceed=false" >> $GITHUB_OUTPUT
         fi

     # Filter updated files
      - name: Filter updated directories
        id: filter_updated_dirs
        if: steps.changed-markdown-files.outputs.modified_files != ''
        run: |
         if grep -oP 'en/lessons/\K[^/]*' updated-files.txt > updated_relevant_dirs.txt; then
          echo "Updated relevant directories found. Proceeding with the job."
          echo "proceed=true" >> $GITHUB_OUTPUT
         else
          echo "No updated relevant directories found."
          echo "proceed=false" >> $GITHUB_OUTPUT
         fi
        
     # Upload new relevant directories list as artifact
      - name: Upload new relevant directories list as artifact
        if: steps.filter_new_dirs.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: new-relevant-dirs
          path: new_relevant_dirs.txt
        
     # Upload updated relevant directories list as artifact
      - name: Upload updated relevant directories list as artifact
        if: steps.filter_updated_dirs.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-relevant-dirs
          path: updated_relevant_dirs.txt
          
  build-zip-files:
    name: Build zip files
    needs: changed_files
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.filter_dirs.outputs.proceed }}
    if: needs.changed_files.outputs.proceed == 'true'
    steps:
      - name: Checkout my code
        uses: actions/checkout@v4
        
      - name: Setup Jar File Path
        id: setup-jar-path
        run: echo "jar-path=academy-md-html-0.2.jar" >> $GITHUB_ENV
      
      - name: Download Release builder Artifact from Repository "academy-md-html"
        # "https://github.com/camunda-academy/academy-md-html/releases/download/v0.2/${{ env.jar-path }}" \
        # -H "Authorization: Bearer ${{ secrets.PAT }}"
        run: |
          curl -fSL -o ${{ env.jar-path }} \
          "https://github.com/ecuriotto/converter-example/releases/download/0.2/${{ env.jar-path }}"
        
      - name: Execute JAR file
        run: java -jar ${{ env.jar-path }} ./en
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zip-files
          path: ./en/target/*.zip

  create-release:
    name: Create release
    needs: build-zip-files
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.filter_dirs.outputs.proceed }}
    if: needs.changed_files.outputs.proceed == 'true'
    steps: 
        - name: Checkout code from Release repository
          uses: actions/checkout@v4
          with:
            repository: camunda-academy/enrico-temp-storage

        - name: Set up Git user for GitHub Actions
          run: |
              git config --global user.email "ecuriotto@gmail.com"
              git config --global user.name "ecuriotto"
              
        - name: Create Git Tag
          run: |
            tag_name="release-${{ github.sha }}"
            git tag -a $tag_name -m "Version $tag_name"
            echo "tag_name=$tag_name" >> $GITHUB_ENV
          env:
            GITHUB_TOKEN: ${{ secrets.PAT }}
            
        - name: Push Tag to GitHub
          env:
            PAT_TOKEN: ${{ secrets.PAT }}
          run: |
            git remote set-url origin https://$PAT_TOKEN@github.com/camunda-academy/enrico-temp-storage.git
            git push origin ${{ env.tag_name }}
                
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.PAT }}
          with:
            tag_name: release-${{ github.sha }}
            release_name: Release for ${{ github.sha }}
            owner: ecuriotto
            repo: converter-example
            draft: false
            prerelease: false
        # Now we download text files with the list of UPDATED and NEW file names, and all the ZIP files 
        # generated by the java. The java program will generate all the zip files not only the NEW and UPDATED,
        # we will need to filter        
        - name: Download list of NEW relevant directories
          id: download-new-relevant-directories
          uses: actions/download-artifact@v4
          with:
            name: new-relevant-dirs
            # If the artifact does not exist, this step will not fail the job.
          continue-on-error: true
        
        - name: Download list of UPDATED relevant directories
          id: download-updated-relevant-directories
          uses: actions/download-artifact@v4
          with:
            name: updated-relevant-dirs
          # If the artifact does not exist, this step will not fail the job.
          continue-on-error: true
        - name: Download zip files
          id: download-zip-files
          uses: actions/download-artifact@v4
          with:
            name: zip-files
            path: zip-files
          # If the artifact does not exist, this step will not fail the job.
          continue-on-error: true     

        - name: Find, Upload Each Relevant File, and Save URLs
          run: |
            # Initialize or clear the JSON file that will store the URLs
            echo "[]" > release-file-urls.json
        
            upload_and_append() {
              local dir=$1
              local status=$2
        
              for file in ./zip-files/${dir}*.zip; do
                if [ -f "$file" ]; then
                  echo "Uploading $file"
                  response=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                        -H "Content-Type: $(file --mime-type -b $file)" \
                        --data-binary @"$file" \
                        "https://uploads.github.com/repos/camunda/academy&enrico-temp-storage/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $file)")
                  if [ $? -ne 0 ]; then
                    echo "Curl command failed."
                    exit 1
                  fi
        
                  error_message=$(echo $response | jq -r .message)
                  if [ "$error_message" != "null" ]; then
                    echo "Error: $error_message"
                    exit 1
                  fi
        
                  url=$(echo $response | jq -r .browser_download_url)
                  if [ -z "$url" ]; then
                    echo "Failed to get URL from response."
                    exit 1
                  fi
        
                  # Construct JSON object and append to the array
                  jq --arg dir "$dir" --arg url "$url" --arg status "$status" '. += [{"name": $dir, "url": $url, "status": $status}]' release-file-urls.json > temp.json && mv temp.json release-file-urls.json
                fi
              done
            }
        
            # Process each new directory
            while read -r dir; do
              upload_and_append "$dir" "new"
            done < new_relevant_dirs.txt
        
            # Process each updated directory
            while read -r dir; do
              upload_and_append "$dir" "updated"
            done < updated_relevant_dirs.txt
          env:
            GITHUB_TOKEN: ${{ secrets.PAT }}
        - name: Upload URL list as artifact
          if: needs.changed_files.outputs.proceed == 'true'
          uses: actions/upload-artifact@v4
          with:
            name: release-file-urls
            path: release-file-urls.json