name: Print Updated Resources

on:
  push:
    branches:
      - master

jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest
    name: Test changed-files
    outputs:
      files_changed: ${{ steps.set_output.outputs.files_changed }} 
    steps:
      - uses: actions/checkout@v4

      - name: Get all changed markdown files
        id: changed-markdown-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
             **.md
             **.png
             **.jpg
             **.jpeg
      - name: Check for Markdown changes
        id: set_output
        run: echo "::set-output name=files_changed::${{ steps.changed-markdown-files.outputs.any_changed == 'true' }}"

      - name: List all changed files markdown files and save to file
        if: steps.changed-markdown-files.outputs.any_changed == 'true'
        run: |
          echo "${{ steps.changed-markdown-files.outputs.all_changed_files }}" > changed-md-files.txt
          cat changed-md-files.txt

      - name: Upload changed markdown files as artifact
        uses: actions/upload-artifact@v3
        with:
          name: changed-md-files
          path: changed-md-files.txt
          
  create-release:
    needs: changed_files
    runs-on: ubuntu-latest
    if: needs.changed_files.outputs.files_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Jar File Path
        id: setup-jar-path
        run: echo "jar-path=academy-md-html-0.2.jar" >> $GITHUB_ENV
      
      - name: Download Release builder Artifact from Repository "academy-md-html"
        # "https://github.com/camunda-academy/academy-md-html/releases/download/v0.2/${{ env.jar-path }}" \
        # -H "Authorization: Bearer ${{ secrets.PAT }}"
        run: |
          curl -fSL -o ${{ env.jar-path }} \
          "https://github.com/ecuriotto/converter-example/releases/download/0.2/${{ env.jar-path }}"
        
      - name: List files in the directory (debug)
        run: ls -lah
        
      - name: Execute JAR file
        run: java -jar ${{ env.jar-path }} ./en

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.sha }}
          release_name: Release for ${{ github.sha }}
          draft: false
          prerelease: false
          
      - name: Download changed markdown files artifact
        uses: actions/download-artifact@v3
        with:
          name: changed-md-files

      - name: Extract relevant ZIP files to upload
        id: filter_dirs
        run: |
          if grep -oP 'en/lessons/\K[^/]*' changed-md-files.txt > relevant_dirs.txt; then
            echo "Relevant directories found. Proceeding with the job."
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant directories found. Exiting job successfully."
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi
          cat relevant_dirs.txt || true  # Ensures the step doesn't fail if cat has nothing to display
  
        
      - name: Find, Upload Each Relevant File, and Save URLs
        if: steps.filter_dirs.outputs.proceed == 'true'
        run: |
          echo "" > release-file-urls.txt  # Initialize or clear the file that will store the URLs
          for dir in $(cat relevant_dirs.txt); do
            for file in ./en/target/${dir}*.zip; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                response=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     -H "Content-Type: $(file --mime-type -b $file)" \
                     --data-binary @"$file" \
                     "https://uploads.github.com/repos/camunda-academy/enrico-test/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $file)")
                url=$(echo $response | jq -r .browser_download_url)
                echo $url >> release-file-urls.txt
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload URL list as artifact
        if: steps.filter_dirs.outputs.proceed == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: release-file-urls
          path: release-file-urls.txt




