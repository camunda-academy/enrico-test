name: Print Updated Resources

on:
  push:
    branches:
      - master

jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest
    name: Test changed-files
    outputs:
      proceed: ${{ steps.filter_new_dirs.outputs.proceed || steps.filter_updated_dirs.outputs.proceed }}
    steps:
      - uses: actions/checkout@v4

      - name: Get all changed markdown files
        id: changed-markdown-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
             **.md
             **.png
             **.jpg
             **.jpeg
      - name: Check if at least one file is updated or created
        id: set_created_or_updated_file
        run: echo "created_or_updated_files=${{ steps.changed-markdown-files.outputs.any_changed == 'true' }}" >> $GITHUB_OUTPUT           

      - name: Save new Markdown or image files to file
        if: steps.changed-markdown-files.outputs.added_files != ''
        run: |
          echo "${{ steps.changed-markdown-files.outputs.added_files }}" > new-files.txt
          cat new-files.txt
  
      - name: Save updated Markdown or image files to file
        if: steps.changed-markdown-files.outputs.modified_files != ''
        run: |
          echo "${{ steps.changed-markdown-files.outputs.modified_files }}" > updated-files.txt
          cat updated-files.txt

      # Filter new files
      - name: Filter new directories
        id: filter_new_dirs
        if: steps.changed-markdown-files.outputs.added_files != ''
        run: |
         if grep -oP 'en/lessons/\K[^/]*' new-files.txt > new_relevant_dirs.txt; then
           echo "New relevant directories found. Proceeding with the job."
           echo "proceed=true" >> $GITHUB_OUTPUT
         else
           echo "No new relevant directories found."
           echo "proceed=false" >> $GITHUB_OUTPUT
         fi

     # Filter updated files
      - name: Filter updated directories
        id: filter_updated_dirs
        if: steps.changed-markdown-files.outputs.modified_files != ''
        run: |
         if grep -oP 'en/lessons/\K[^/]*' updated-files.txt > updated_relevant_dirs.txt; then
          echo "Updated relevant directories found. Proceeding with the job."
          echo "proceed=true" >> $GITHUB_OUTPUT
         else
          echo "No updated relevant directories found."
          echo "proceed=false" >> $GITHUB_OUTPUT
         fi
        
     # Upload new relevant directories list as artifact
      - name: Upload new relevant directories list as artifact
        if: steps.filter_new_dirs.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: new-relevant-dirs
          path: new_relevant_dirs.txt
        
     # Upload updated relevant directories list as artifact
      - name: Upload updated relevant directories list as artifact
        if: steps.filter_updated_dirs.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-relevant-dirs
          path: updated_relevant_dirs.txt
          
  create-release:
    needs: changed_files
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.filter_dirs.outputs.proceed }}
    if: needs.changed_files.outputs.proceed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Jar File Path
        id: setup-jar-path
        run: echo "jar-path=academy-md-html-0.2.jar" >> $GITHUB_ENV
      
      - name: Download Release builder Artifact from Repository "academy-md-html"
        # "https://github.com/camunda-academy/academy-md-html/releases/download/v0.2/${{ env.jar-path }}" \
        # -H "Authorization: Bearer ${{ secrets.PAT }}"
        run: |
          curl -fSL -o ${{ env.jar-path }} \
          "https://github.com/ecuriotto/converter-example/releases/download/0.2/${{ env.jar-path }}"
        
      - name: Execute JAR file
        run: java -jar ${{ env.jar-path }} ./en

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.sha }}
          release_name: Release for ${{ github.sha }}
          draft: false
          prerelease: false
          
      - name: Download new relevant directories artifact
        uses: actions/download-artifact@v4
        with:
          name: new-relevant-dirs
          # If the artifact does not exist, this step will not fail the job.
  
      - name: Download updated relevant directories artifact
        uses: actions/download-artifact@v4
        with:
          name: updated-relevant-dirs
          # If the artifact does not exist, this step will not fail the job.

      - name: Find, Upload Each Relevant File, and Save URLs
        run: |
          # Initialize or clear the JSON file that will store the URLs
          echo "[]" > release-file-urls.json
          
          # Combine new and updated directories lists into one file, avoiding duplicate entries
          cat new_relevant_dirs.txt updated_relevant_dirs.txt 2>/dev/null | sort | uniq > combined_relevant_dirs.txt

          # Process each directory
          for dir in $(cat combined_relevant_dirs.txt); do
            for file in ./en/target/${dir}*.zip; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                response=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Content-Type: $(file --mime-type -b $file)" \
                      --data-binary @"$file" \
                      "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $file)")
                url=$(echo $response | jq -r .browser_download_url)
                
                # Construct JSON object and append to the array
                jq --arg dir "$dir" --arg url "$url" '. += [{"name": $dir, "url": $url}]' release-file-urls.json > temp.json && mv temp.json release-file-urls.json
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload URL list as artifact
        if: needs.changed_files.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-file-urls
          path: release-file-urls.json

    
  upload_to_skilljar:
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Retrieve the course.properties where the skilljarcourse id is located  
      - name: Check for course.properties file
        id: check_file
        run: |
          if [ ! -f "en/course.properties" ]; then
            echo "course.properties file does not exist."
            exit 1
          fi
  
      - name: Read skilljarCourseIds
        run: |
            skilljarCourseIds=$(grep 'skilljarCourseId' en/course.properties | cut -d'=' -f2 | tr -d ' ')
            if [ -z "$skilljarCourseIds" ]; then
              echo "skilljarCourseIds not found in properties file."
              exit 1
            fi
            echo "skilljarCourseIds=$skilljarCourseIds" >> $GITHUB_ENV
            echo "$skilljarCourseIds" > skilljarCourseIds.txt
  
      - name: Fetch data from Skilljar for each courseId
        ## Let's assume there can be several courseId, but at the moment there will be only one.
        run: |
            cat skilljarCourseIds.txt | tr ',' '\n' | while IFS= read -r courseId; do
              echo "Fetching data for courseId: $courseId"
              response=$(curl -s -X GET \
                -u ${{ secrets.SKILLJAR_SECRET }}: \
                "https://api.skilljar.com/v1/lessons?course_id=$courseId")
              echo "$response" > "skilljarResponse.json"
            done
      - name: get file urls
        uses: actions/download-artifact@v4
        with:
          name: release-file-urls
          
      - name: List contents of the artifact directory
        run: cat release-file-urls.json

      - name: Match IDs and Save to JSON
        run: |
          # Initialize the JSON array
          echo "[]" > lessonsToChange.json

          # Load the Skilljar response from a file
          skilljarResponse=$(cat skilljarResponse.json)
          echo "$skilljarResponse"

          # Process each name entry from release-file-urls.json
          jq -r '.[] | .name' release-file-urls.json | while read -r name; do
            # Modify the name for comparison
            modified_name=$(echo "$name" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
            echo "Processing name: $name, Modified name: $modified_name"
            
            # Perform the comparison and extract the ID and title
            match=$(echo "$skilljarResponse" | jq -r --arg modified_name "$modified_name" \
              '.results[] | select(.title | ascii_downcase | gsub(" "; "-") == $modified_name) | {id: .id, title: .title, course_id: .course_id}')

            if [ ! -z "$(echo $match | jq -r .id)" ]; then
              match_id=$(echo $match | jq -r .id)
              match_title=$(echo $match | jq -r .title)
              match_course_id=$(echo $match | jq -r .course_id)
              # Retrieve the URL from release-file-urls.json
              url=$(jq -r --arg name "$name" '.[] | select(.name == $name) | .url' release-file-urls.json)
              echo "Match found: ID $match_id with URL: $url, Title: $match_title, Course id: $match_course_id"
              
              # Append the match to the JSON array
              jq --arg id "$match_id" --arg url "$url" --arg title "$match_title" --arg course_id "$match_course_id" \
              '. += [{"lesson_id": $id, "url": $url, "title": $title, "course_id": $course_id}]' lessonsToChange.json > temp.json && mv temp.json lessonsToChange.json
            else
              echo "No match found for $modified_name"
            fi
          done
          echo "These are the matches..."
          cat lessonsToChange.json

      - name: Process lessons and update data
        run: |
          # Load the JSON data from the lessons file
          lessons=$(cat lessonsToChange.json)
          echo "$lessons"
          
          # Iterate over each lesson entry
          echo "$lessons" | jq -c '.[]' | while read -r lesson; do
            url=$(echo $lesson | jq -r .url)
            title=$(echo $lesson | jq -r .title)
            lessonId=$(echo $lesson | jq -r .lesson_id)
            courseId=$(echo $lesson | jq -r .course_id)
            echo "Analyising:"
            echo "Title: $title"
            echo "Lesson id: $lessonId"
            echo "Course id: $courseId"
            echo "Url: $url"
            # Step 1: Create a web package
            response=$(curl -s -X POST "https://api.skilljar.com/v1/web-packages" \
            -u ${{ secrets.SKILLJAR_SECRET }}: \
            -H "Content-Type: application/json" \
            -H "Accept: */*" \
            -d '{
              "content_url": "'"$url"'",
              "web_package": {
                "title": "'"$title"'",
                "redirect_on_completion": true,
                "sync_on_completion": true
              }
            }')
          # Step 2: Extract the content_web_package_id from the response
          content_web_package_id=$(echo $response | jq -r .id)
          echo "Created web package with ID: $content_web_package_id for Lesson ID: $lessonId"
            
          # Step 3: Update the lesson object
          update_response=$(curl -s -X PUT "https://api.skilljar.com/v1/lessons/$lessonId?course_id=$courseId" \
            -u ${{ secrets.SKILLJAR_SECRET }}: \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "content_web_package_id=$content_web_package_id")
            
          echo "Updated lesson $lessonId with web package ID: $content_web_package_id"

          done
    
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        


