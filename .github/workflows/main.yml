name: Create zip files of updated lessons and deploy to skilljar

on:
  push:
    branches:
      - refactoring

jobs:
  check_updates:
    runs-on: ubuntu-latest
    name: Check repositories for updates in relevant files
    outputs:
      proceed: ${{ steps.create_file_list.outputs.proceed }}
    steps:
      - uses: actions/checkout@v4

      - name: Get new and changed files in repository
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
              **.md
              **.png
              **.jpg
              **.jpeg

      - name: Create list of new and updated files
        id: create_file_list
        run: |
          file_list=()
          proceed=false

          # Read new files
          if [[ -n "${{ steps.changed-files.outputs.added_files }}" ]]; then
            for file in ${{ steps.changed-files.outputs.added_files }}; do
              [[ $file == en/lessons/* ]] && file_list+=("{\"file\":\"$file\",\"status\":\"new\"}")
            done
          fi

          # Read updated files
          if [[ -n "${{ steps.changed-files.outputs.modified_files }}" ]]; then
            for file in ${{ steps.changed-files.outputs.modified_files }}; do
              [[ $file == en/lessons/* ]] && file_list+=("{\"file\":\"$file\",\"status\":\"updated\"}")
            done
          fi
          # Check if the file list is not empty
          if [[ ${#file_list[@]} -gt 0 ]]; then
            proceed=true
            # Create JSON array
            printf "[%s]" "$(IFS=,; echo "${file_list[*]}")" > file_list.json
          else
            # Create an empty JSON array
            echo "[]" > file_list.json
          fi

          echo "File list:"
          cat file_list.json

          # Set outputs
          echo "proceed=$proceed" >> $GITHUB_OUTPUT
          

      # Upload the file list as an artifact
      - name: Upload file list as an artifact
        if: steps.create_file_list.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: file-list-artifact
          path: file_list.json
          
  create-release:
    name: Build and create release
    needs: check_updates
    runs-on: ubuntu-latest
    if: needs.check_updates.outputs.proceed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Jar File Path
        run: echo "jar-path=academy-md-html-0.2.jar" >> $GITHUB_ENV
      
      - name: Download Release builder Artifact from Repository "academy-md-html"
        run: |
          curl -fSL -o ${{ env.jar-path }} \
          "https://github.com/ecuriotto/converter-example/releases/download/0.2/${{ env.jar-path }}"
        
      - name: Build zip files
        run: java -jar ${{ env.jar-path }} ./en
  
      - name: Upload Zip Files as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-zip-files
          path: ./en/target/*.zip
  
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.sha }}
          release_name: Release for ${{ github.sha }}
          draft: false
          prerelease: false
  
      - name: Save Release ID
        run: echo "release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT
          
  populate-release:
    name: Upload files to the release
    needs: create-release
    runs-on: ubuntu-latest
    steps: 
      - name: Download file list artifact
        uses: actions/download-artifact@v4
        with:
          name: file-list-artifact
  
      - name: Download all zip files artifact
        uses: actions/download-artifact@v4
        with:
          name: all-zip-files
  
      - name: Upload zip files to release
        run: |
          # Initialize or clear the JSON file that will store the URLs
          echo "[]" > release-file-urls.json
          
          # Process each file from the JSON list
          for row in $(jq -c '.[]' file_list.json); do
            file=$(echo $row | jq -r '.file')
            status=$(echo $row | jq -r '.status')
            # Assuming that the file path is relative to the current directory
            if [ -f "$file" ]; then
              echo "Uploading $file"
              response=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: $(file --mime-type -b $file)" \
                    --data-binary @"$file" \
                    "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.create-release.outputs.release_id }}/assets?name=$(basename $file)")
              url=$(echo $response | jq -r .browser_download_url)
              
              # Construct JSON object and append to the array
              jq --arg file "$file" --arg url "$url" --arg status "$status" '. += [{"name": $file, "url": $url, "status": $status}]' release-file-urls.json > temp.json && mv temp.json release-file-urls.json
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Upload URL list as artifact
        if: needs.create-release.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-file-urls
          path: release-file-urls.json
 
  get_skilljar_course_id:
    runs-on: ubuntu-latest
    needs: [populate-release]
    outputs:
      skilljar_course_ids: ${{ steps.extract_skilljar_course_ids.outputs.skilljar_course_ids }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract skilljarCourseIds and set as output
        id: extract_skilljar_course_ids
        run: |
          skilljarCourseIdLine=$(grep 'skilljarCourseId' en/course.properties)
          skilljarCourseIds=$(echo $skilljarCourseIdLine | sed 's/skilljarCourseId[:=][[:space:]]*//; s/,[[:space:]]*$//')
          # Convert to a newline-separated string and then to a JSON array
          skilljarCourseIdsJson=$(echo $skilljarCourseIds | tr ',' '\n' | jq -R -s -c 'split("\n") | map(select(. != "")| gsub("^\\s+|\\s+$"; ""))')
          # Output the JSON array to the workflow
          echo "skilljar_course_ids=$skilljarCourseIdsJson" >> $GITHUB_OUTPUT
          echo $skilljarCourseIdsJson

  #this job will run in a matrix, this means that it will run once for each course_id
  for-each-courseId-create-update-lessons:
    runs-on: ubuntu-latest
    needs: [get_skilljar_course_id]
    strategy:
      fail-fast: false
      matrix:
        skilljar_course_id: ${{ fromJson(needs.get_skilljar_course_id.outputs.skilljar_course_ids) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Print skilljar course IDs output
        run: |
          echo "Processing Skilljar course ID: ${{ matrix.skilljar_course_id }}"

      - name: Fetch data from Skilljar for each courseId in the matrix
        run: |
          echo "Fetching data for courseId: ${{ matrix.skilljar_course_id }}"
          response=$(curl -s -X GET \
            -u ${{ secrets.SKILLJAR_SECRET }}: \
            "https://api.skilljar.com/v1/lessons?course_id=${{ matrix.skilljar_course_id }}")
          echo "$response" > "skilljarResponse-${{ matrix.skilljar_course_id }}.json"
          echo "Skilljar API Response for $courseId:"
          echo "$response"
          # I need the highest order for another call later on
          highest_order=$(echo "$response" | jq '[.results[].order] | max')
          echo "highest_order=$highest_order" >> $GITHUB_ENV

      - name: get file urls
        uses: actions/download-artifact@v4
        with:
          name: release-file-urls

      - name: Match IDs and Save to JSON
        run: |
            # Initialize the JSON array to store matched lessons with additional details
            echo "[]" > lessonsToChange.json
        
            # Load the Skilljar response from a file into a variable for later processing
            skilljarResponse=$(cat skilljarResponse-${{ matrix.skilljar_course_id }}.json)
            echo "Skilljar Response:"
            echo "$skilljarResponse"
        
            # Define the course_id from the matrix context
            course_id="${{ matrix.skilljar_course_id }}"
        
            # Process each entry from release-file-urls.json, which contains the name, URL, and status of files
            jq -c '.[]' release-file-urls.json | while IFS= read -r line; do
              # Extract name and status using jq
              name=$(echo "$line" | jq -r '.name')
              status=$(echo "$line" | jq -r '.status')
              
              # Normalize the name for comparison by replacing spaces with hyphens and converting to lowercase
              modified_name=$(echo "$name" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
              echo "Processing name: $name (Modified: $modified_name) with status: $status"
        
              # Initialize variables
              match_id=""
              match_title=""
              url=$(echo "$line" | jq -r '.url')
        
              # If the status is 'updated', attempt to find a match
              if [ "$status" == "updated" ]; then
                # Compare the modified name with titles from the Skilljar response to find a match
                match=$(echo "$skilljarResponse" | jq -r --arg modified_name "$modified_name" \
                  '.results[] | select(.title | ascii_downcase | gsub(" "; "-") == $modified_name) | {id: .id, title: .title}')
        
                # Check if a match was found by looking for a non-empty ID
                if [ ! -z "$(echo $match | jq -r .id)" ]; then
                  # Extract the ID and title from the matched Skilljar lesson
                  match_id=$(echo $match | jq -r .id)
                  match_title=$(echo $match | jq -r .title)
                  echo "Match found: ID $match_id with URL: $url, Title: $match_title, Course ID: $course_id, Status: $status"
                else
                  # Output a message if no match was found for the modified name
                  echo "No match found for $modified_name with status: $status"
                fi
              else
                # For new files, leave the lesson_id empty and use the original name as the title
                match_title="$name"
                echo "Processing new file: $name with URL: $url and Course ID: $course_id"
              fi
        
              # Append the details to the lessonsToChange.json array, including status and possibly empty lesson_id
              jq --arg id "$match_id" --arg url "$url" --arg title "$match_title" --arg course_id "$course_id" --arg status "$status" \
              '. += [{"lesson_id": $id, "url": $url, "title": $title, "course_id": $course_id, "status": $status}]' lessonsToChange.json > temp.json && mv temp.json lessonsToChange.json
            done
        
            # Display the final list of matched lessons with their details
            echo "Matched lessons with URLs and status:"
            cat lessonsToChange.json

      - name: Process lessons and update data
        run: |
            # Load the JSON data from the lessons file
            lessons=$(cat lessonsToChange.json)
            echo "$lessons"
            
            # Iterate over each lesson entry
            echo "$lessons" | jq -c '.[]' | while read -r lesson; do
              url=$(echo $lesson | jq -r .url)
              title=$(echo $lesson | jq -r .title)
              lessonId=$(echo $lesson | jq -r .lesson_id)
              courseId=$(echo $lesson | jq -r .course_id)
              status=$(echo $lesson | jq -r .status) # Extract the status
              echo "Analyzing:"
              echo "Title: $title"
              echo "Lesson ID: $lessonId"
              echo "Course ID: $courseId"
              echo "URL: $url"
              echo "Status: $status"
              
              # Step 1: Create a web package
              #"content_url": "'"$url"'",
              response=$(curl -s -X POST "https://api.skilljar.com/v1/web-packages" \
              -u ${{ secrets.SKILLJAR_SECRET }}: \
              -H "Content-Type: application/json" \
              -H "Accept: */*" \
              -d '{               
                "content_url": "'"$url"'",
                "web_package": {
                  "title": "'"$title"'",
                  "redirect_on_completion": false,
                  "sync_on_completion": false
                }
              }')
              echo "$(date '+%Y%m%d:%H %M %S') Before sleeping"

              # sync_on_completion doesn't seem to work, let's wait for some seconds.
              sleep 10

              # Step 2: Extract the content_web_package_id from the response
              content_web_package_id=$(echo $response | jq -r .id)
              echo "$(date '+%Y%m%d:%H %M %S') Created web package with ID: $content_web_package_id for Lesson ID: $lessonId"
              echo "$response"
              
              # Step 3: Check the status and perform the appropriate action
              if [[ "$status" == "updated" ]]; then
                # Update the existing lesson object
                update_response=$(curl -s -X PUT "https://api.skilljar.com/v1/lessons/$lessonId?course_id=$courseId" \
                  -u ${{ secrets.SKILLJAR_SECRET }}: \
                  -H "Content-Type: application/x-www-form-urlencoded" \
                  -d "content_web_package_id=$content_web_package_id")
                
                echo "Updated lesson $lessonId with web package ID: $content_web_package_id"
                echo "$update_response"
              else
                new_order=$((highest_order + 1))
                echo "New order will be: $new_order"
                # Create a new lesson object
                create_response=$(curl -s -X POST "https://api.skilljar.com/v1/lessons" \
                  -u ${{ secrets.SKILLJAR_SECRET }}: \
                  -H "Content-Type: application/json" \
                  -H "Accept: */*" \
                  -d '{
                    "title": "'"$title"'",
                    "course_id": "'"$courseId"'",
                    "content_web_package_id": "'"$content_web_package_id"'",
                    "order": '"$new_order"',
                    "type": "WEB_PACKAGE"
                  }')
                
                echo "Created new lesson with title: $title and web package ID: $content_web_package_id"
                echo "$create_response"
                echo "highest_order=$new_order" >> $GITHUB_ENV
              fi
            done        
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        