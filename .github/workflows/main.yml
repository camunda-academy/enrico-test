name: Create zip files of updated lessons and deploy to skilljar

on:
  push:
    branches:
      - master

jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest
    name: Test changed-files
    outputs:
      proceed: ${{ steps.filter_new_dirs.outputs.proceed || steps.filter_updated_dirs.outputs.proceed }}
    steps:
      - uses: actions/checkout@v4

      - name: Get all changed markdown files
        id: changed-markdown-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
             **.md
             **.png
             **.jpg
             **.jpeg
      - name: Check if at least one file is updated or created
        id: set_created_or_updated_file
        run: echo "created_or_updated_files=${{ steps.changed-markdown-files.outputs.any_changed == 'true' }}" >> $GITHUB_OUTPUT           

      - name: Save new Markdown or image files to file
        if: steps.changed-markdown-files.outputs.added_files != ''
        run: |
          echo "${{ steps.changed-markdown-files.outputs.added_files }}" > new-files.txt
          cat new-files.txt
  
      - name: Save updated Markdown or image files to file
        if: steps.changed-markdown-files.outputs.modified_files != ''
        run: |
          echo "${{ steps.changed-markdown-files.outputs.modified_files }}" > updated-files.txt
          cat updated-files.txt

      # Filter new files
      - name: Filter new directories
        id: filter_new_dirs
        if: steps.changed-markdown-files.outputs.added_files != ''
        run: |
         if grep -oP 'en/lessons/\K[^/]*' new-files.txt > new_relevant_dirs.txt; then
           echo "New relevant directories found. Proceeding with the job."
           echo "proceed=true" >> $GITHUB_OUTPUT
         else
           echo "No new relevant directories found."
           echo "proceed=false" >> $GITHUB_OUTPUT
         fi

     # Filter updated files
      - name: Filter updated directories
        id: filter_updated_dirs
        if: steps.changed-markdown-files.outputs.modified_files != ''
        run: |
         if grep -oP 'en/lessons/\K[^/]*' updated-files.txt > updated_relevant_dirs.txt; then
          echo "Updated relevant directories found. Proceeding with the job."
          echo "proceed=true" >> $GITHUB_OUTPUT
         else
          echo "No updated relevant directories found."
          echo "proceed=false" >> $GITHUB_OUTPUT
         fi
        
     # Upload new relevant directories list as artifact
      - name: Upload new relevant directories list as artifact
        if: steps.filter_new_dirs.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: new-relevant-dirs
          path: new_relevant_dirs.txt
        
     # Upload updated relevant directories list as artifact
      - name: Upload updated relevant directories list as artifact
        if: steps.filter_updated_dirs.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-relevant-dirs
          path: updated_relevant_dirs.txt
          
  create-release:
    needs: changed_files
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.filter_dirs.outputs.proceed }}
    if: needs.changed_files.outputs.proceed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Jar File Path
        id: setup-jar-path
        run: echo "jar-path=academy-md-html-0.2.jar" >> $GITHUB_ENV
      
      - name: Download Release builder Artifact from Repository "academy-md-html"
        # "https://github.com/camunda-academy/academy-md-html/releases/download/v0.2/${{ env.jar-path }}" \
        # -H "Authorization: Bearer ${{ secrets.PAT }}"
        run: |
          curl -fSL -o ${{ env.jar-path }} \
          "https://github.com/ecuriotto/converter-example/releases/download/0.2/${{ env.jar-path }}"
        
      - name: Execute JAR file
        run: java -jar ${{ env.jar-path }} ./en

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.sha }}
          release_name: Release for ${{ github.sha }}
          draft: false
          prerelease: false
          
      - name: Download new relevant directories artifact
        id: download-new-relevant-directories
        uses: actions/download-artifact@v4
        with:
          name: new-relevant-dirs
        # If the artifact does not exist, this step will not fail the job.
        continue-on-error: true
  
      - name: Download updated relevant directories artifact
        id: download-updated-relevant-directories
        uses: actions/download-artifact@v4
        with:
          name: updated-relevant-dirs
        # If the artifact does not exist, this step will not fail the job.
        continue-on-error: true

      - name: Print message if artifact not found
        if: ${{ steps.download-new-relevant-directories.outcome == 'failure' || steps.download-updated-relevant-directories.outcome == 'failure' }}
        run: |
          echo "One or more artifacts not found but this may be ok, let's go on!"

      - name: Find, Upload Each Relevant File, and Save URLs
        run: |
          # Initialize or clear the JSON file that will store the URLs
          echo "[]" > release-file-urls.json
          
          # Process each new directory
          for dir in $(cat new_relevant_dirs.txt); do
            for file in ./en/target/${dir}*.zip; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                response=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Content-Type: $(file --mime-type -b $file)" \
                      --data-binary @"$file" \
                      "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $file)")
                url=$(echo $response | jq -r .browser_download_url)
                
                # Construct JSON object and append to the array indicating the file is new
                jq --arg dir "$dir" --arg url "$url" '. += [{"name": $dir, "url": $url, "status": "new"}]' release-file-urls.json > temp.json && mv temp.json release-file-urls.json
              fi
            done
          done

          # Process each updated directory
          for dir in $(cat updated_relevant_dirs.txt); do
            for file in ./en/target/${dir}*.zip; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                response=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Content-Type: $(file --mime-type -b $file)" \
                      --data-binary @"$file" \
                      "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $file)")
                url=$(echo $response | jq -r .browser_download_url)
                
                # Construct JSON object and append to the array indicating the file is updated
                jq --arg dir "$dir" --arg url "$url" '. += [{"name": $dir, "url": $url, "status": "updated"}]' release-file-urls.json > temp.json && mv temp.json release-file-urls.json
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload URL list as artifact
        if: needs.changed_files.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-file-urls
          path: release-file-urls.json

    
  get_skilljar_course_id:
    runs-on: ubuntu-latest
    needs: [create-release]
    outputs:
      skilljar_course_ids: ${{ steps.extract_skilljar_course_ids.outputs.skilljar_course_ids }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract skilljarCourseIds and set as output
        id: extract_skilljar_course_ids
        run: |
          skilljarCourseIdLine=$(grep 'skilljarCourseId' en/course.properties)
          skilljarCourseIds=$(echo $skilljarCourseIdLine | sed 's/skilljarCourseId[:=][[:space:]]*//; s/,[[:space:]]*$//')
          # Convert to a newline-separated string and then to a JSON array
          skilljarCourseIdsJson=$(echo $skilljarCourseIds | tr ',' '\n' | jq -R -s -c 'split("\n") | map(select(. != "")| gsub("^\\s+|\\s+$"; ""))')
          # Output the JSON array to the workflow
          echo "skilljar_course_ids=$skilljarCourseIdsJson" >> $GITHUB_OUTPUT
          echo $skilljarCourseIdsJson

  match_and_update_skilljar:
    runs-on: ubuntu-latest
    needs: [get_skilljar_course_id]
    strategy:
      fail-fast: false
      matrix:
        skilljar_course_id: ${{ fromJson(needs.get_skilljar_course_id.outputs.skilljar_course_ids) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Print skilljar course IDs output
        run: |
          echo "Processing Skilljar course ID: ${{ matrix.skilljar_course_id }}"

      - name: Fetch data from Skilljar for each courseId in the matrix
        run: |
          echo "Fetching data for courseId: ${{ matrix.skilljar_course_id }}"
          response=$(curl -s -X GET \
            -u ${{ secrets.SKILLJAR_SECRET }}: \
            "https://api.skilljar.com/v1/lessons?course_id=${{ matrix.skilljar_course_id }}")
          echo "$response" > "skilljarResponse-${{ matrix.skilljar_course_id }}.json"
          echo "Skilljar API Response for $courseId:"
          echo "$response"

      - name: get file urls
        uses: actions/download-artifact@v4
        with:
          name: release-file-urls

      - name: Match IDs and Save to JSON
        run: |
          # Initialize the JSON array to store matched lessons with additional details
          echo "[]" > lessonsToChange.json
      
          # Load the Skilljar response from a file into a variable for later processing
          skilljarResponse=$(cat skilljarResponse-${{ matrix.skilljar_course_id }}.json)
          echo "Skilljar Response:"
          echo "$skilljarResponse"
      
          # Process each entry from release-file-urls.json, which contains the name, URL, and status of files
          jq -c '.[]' release-file-urls.json | while IFS= read -r line; do
            # Extract name and status using jq
            name=$(echo "$line" | jq -r '.name')
            status=$(echo "$line" | jq -r '.status')
            
            # Normalize the name for comparison by replacing spaces with hyphens and converting to lowercase
            modified_name=$(echo "$name" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
            echo "Processing name: $name (Modified: $modified_name) with status: $status"
      
            # Compare the modified name with titles from the Skilljar response to find a match
            match=$(echo "$skilljarResponse" | jq -r --arg modified_name "$modified_name" \
              '.results[] | select(.title | ascii_downcase | gsub(" "; "-") == $modified_name) | {id: .id, title: .title, course_id: .course_id}')
      
            # Check if a match was found by looking for a non-empty ID
            if [ ! -z "$(echo $match | jq -r .id)" ]; then
              # Extract the ID, title, and course_id from the matched Skilljar lesson
              match_id=$(echo $match | jq -r .id)
              match_title=$(echo $match | jq -r .title)
              match_course_id=$(echo $match | jq -r .course_id)
              # Retrieve the corresponding URL from the original line
              url=$(echo "$line" | jq -r '.url')
              echo "Match found: ID $match_id with URL: $url, Title: $match_title, Course ID: $match_course_id, Status: $status"
              
              # Append the matched lesson details, including status, to the lessonsToChange.json array
              jq --arg id "$match_id" --arg url "$url" --arg title "$match_title" --arg course_id "$match_course_id" --arg status "$status" \
              '. += [{"lesson_id": $id, "url": $url, "title": $title, "course_id": $course_id, "status": $status}]' lessonsToChange.json > temp.json && mv temp.json lessonsToChange.json
            else
              # Output a message if no match was found for the modified name
              echo "No match found for $modified_name with status: $status"
            fi
          done
      
          # Display the final list of matched lessons with their details
          echo "Matched lessons with URLs and status:"
          cat lessonsToChange.json

        
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        